# Generated by Django 3.2 on 2024-05-31 08:15
from django.contrib.auth.hashers import make_password
from django.db import migrations

class Migration(migrations.Migration):
    def insert_default_data(apps, schema_editor):
        # Users
        UserD = apps.get_model('auth', 'User')
        root_u = UserD.objects.create(
            id=1,
            email='root@algator.com',
            username='root',
            password=make_password('root'),
            is_superuser=True,
            is_active=True
        )
        root_u.save()
        anonymous_u = UserD.objects.create(
            id=2,
            email='anonymous@algator.com',
            username='anonymous',
            password=make_password('anonymous'),
            is_superuser=False,
            is_active=False,
            is_staff=False
        )
        anonymous_u.save()
        algator_u = UserD.objects.create(
            id=3,
            email='algator@algator.com',
            username='algator',
            password=make_password('algator'),
            is_superuser=True,
            is_active=True
        )
        algator_u.save()

        # Custom user
        User = apps.get_model('authuser', 'User')
        root_uu = User(id='u0', user=root_u)
        root_uu.save()
        anonymous_uu = User(id='u1', user=anonymous_u)
        anonymous_uu.save()
        algator_uu = User(id='u2', user=algator_u)
        algator_uu.save()


        # EntityType
        EntityType = apps.get_model('authuser', 'EntityType')
        system_et = EntityType(id='et0', name='System')
        system_et.save()
        project_et = EntityType(id='et1', name='Project')
        project_et.save()
        algorithm_et = EntityType(id='et2', name='Algorithm')
        algorithm_et.save()
        test_set_et = EntityType(id='et3', name='Test set')
        test_set_et.save()
        groups_et = EntityType(id='et4', name='Groups')
        groups_et.save()
        presenter_et = EntityType(id='et5', name='Presenter')
        presenter_et.save()

        # PermissionType
        PermissionType = apps.get_model('authuser', 'PermissionType')
        can_read_pt = PermissionType(id='p0', name='Can read?', codename='can_read', value=1)
        can_read_pt.save()
        can_write_pt = PermissionType(id='p1', name='Can write?', codename='can_write', value=2)
        can_write_pt.save()
        can_execute_pt = PermissionType(id='p2', name='Can execute?', codename='can_execute', value=4)
        can_execute_pt.save()
        add_project_pt = PermissionType(id='p3', name='Can add project?', codename='can_add_project', value=8)
        add_project_pt.save()
        can_add_testset_pt = PermissionType(id='p4', name='Can add test set?', codename='can_add_testset', value=16)
        can_add_testset_pt.save()
        can_add_algorithm_pt = PermissionType(id='p5', name='Can add algorithm?', codename='can_add_algorithm', value=32)
        can_add_algorithm_pt.save()
        can_edit_rights_pt = PermissionType(id='p6', name='Can edit rights?', codename='can_edit_rights', value=64)
        can_edit_rights_pt.save()
        can_edit_users_pt = PermissionType(id='p7', name='Can edit users?', codename='can_edit_users', value=128)
        can_edit_users_pt.save()
        full_control_pt = PermissionType(id='p8', name='Full control', codename='full_control', value=0xFFFF)
        full_control_pt.save()

        # Groups
        Group = apps.get_model('authuser', 'Group')
        everyone_g = Group(id='g0', name='everyone', owner=root_uu)
        everyone_g.save()
        anonymous_g = Group(id='g1', name='anonymous', owner=root_uu)
        anonymous_g.save()

        # Custom groups
        students_group = Group(id='g2', name='students', owner=algator_uu)
        students_group.save()


        # Entities
        Entities = apps.get_model('authuser', 'Entities')
        e0 = Entities(id='e0', name='system', entity_type=system_et, is_private=False, owner=root_uu)
        e0.save()


    dependencies = [
        ('authuser', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(insert_default_data),
    ]
